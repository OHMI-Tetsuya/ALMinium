#!/bin/bash
#
# プラグインをインストールすると同時にRedmineの初期設定を行う
#

# インストールするディレクトリ名
DEST_NAME=(`grep -v "^#" redmine/setup/redmine-plugins.lst | awk -F, '{print $1}'`)

# 展開したアーカイブのディレクトリ名 or タグ名
DIR_NAME=(`grep -v "^#" redmine/setup/redmine-plugins.lst | awk -F, '{print $2}'`)

# URL
URL_NAME=(`grep -v "^#" redmine/setup/redmine-plugins.lst | awk -F, '{print $3}'`)

for (( i = 0; i < ${#DIR_NAME[@]}; ++i ))
do
  FILE_NAME=`echo ${URL_NAME[$i]} | sed -e "s/.*\/\(.*$\)/\1/"`
  EXT=`echo ${URL_NAME[$i]} | sed -e "s/.*\.\(.*$\)/\1/"`
    case $EXT in
    zip)
        if [ ! -f cache/$FILE_NAME ]; then
          wget -P cache ${URL_NAME[$i]}
        fi
        yes | unzip -q cache/$FILE_NAME
         rm -fr $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        mv ${DIR_NAME[$i]} $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        rm -f $FILE_NAME
        ;;

    tgz|gz)
        if [ ! -f cache/$FILE_NAME ]; then
          wget -P cache ${URL_NAME[$i]}
        fi
        tar zxf cache/$FILE_NAME
        rm -fr  $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        mv ${DIR_NAME[$i]} $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        rm -f $FILE_NAME
        ;;
    git)
        if [ ! -d cache/${DEST_NAME[$i]} ]; then
          git clone ${URL_NAME[$i]} cache/${DEST_NAME[$i]}
        fi
        if [ -d cache/${DEST_NAME[$i]} ]; then
          cd cache/${DEST_NAME[$i]}
          git checkout ${DIR_NAME[$i]}
          cd ../..
          rm -fr  $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
          cp -fra cache/${DEST_NAME[$i]} $ALM_INSTALL_DIR/plugins/
        fi
        ;;
    *)
        if [ ! -d cache/${DEST_NAME[$i]} ]; then
          if [[ ${URL_NAME[$i]} =~ "bitbucket.org" ]]; then
            hg clone ${URL_NAME[$i]} cache/${DEST_NAME[$i]}
            cd cache/${DEST_NAME[$i]}
            hg checkout ${DIR_NAME[$i]}
            cd ../..
          else
            svn co ${URL_NAME[$i]} cache/${DEST_NAME[$i]}
            if [ "${DIR_NAME[$i]}" != "HEAD" ]; then
              cd cache/${DEST_NAME[$i]}
              svn update -r ${DIR_NAME[$i]}
              cd ../..
            fi
          fi
        fi
        rm -fr  $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        cp -fra cache/${DEST_NAME[$i]} $ALM_INSTALL_DIR/plugins/${DEST_NAME[$i]}
        ;;
    esac
done

# ALMiniumインストールディレクトリへ移動
pushd $ALM_INSTALL_DIR

# passenger package
if [ "$ALM_PASSSENGER_PACKAGE_AVAILABLE" = "1" ]; then
  mv Gemfile.local Gemfile.local.org
  cat Gemfile.local.org | sed "s/gem 'passenger'/#gem 'passenger'/" > Gemfile.local
fi

# for Hudson
if [ -f plugins/redmine_hudson/Gemfile ]; then
  mv plugins/redmine_hudson/Gemfile plugins/redmine_hudson/Gemfile.org
fi

#for DMSF
# avoid bandle install error because of rubyzip version conflict
if [ -f $ALM_INSTALL_DIR/plugins/redmine_dmsf/Gemfile ]; then
  sed -i.org "s/gem 'rubyzip',/gem 'rubyzip'#,/" $ALM_INSTALL_DIR/plugins/redmine_dmsf/Gemfile
fi

# redmineに必要なgemをインストール
bundle install --path vendor/bundle --without development test xapian

# セッションストア秘密鍵を生成
bundle exec rake generate_secret_token

# データベース上にテーブルを作成
bundle exec rake db:migrate RAILS_ENV=production
bundle exec rake redmine:plugins:migrate RAILS_ENV=production

# データベースにデフォルトデータを登録
echo 'ja' |\
bundle exec rake redmine:load_default_data RAILS_ENV=production

# キャッシュクリア
bundle exec rake tmp:cache:clear RAILS_ENV=production
bundle exec rake tmp:sessions:clear RAILS_ENV=production

# for XLS export
if [ -d plugins/redmine_xls_export ]; then
  bundle exec rake redmine:plugins:process_version_change RAILS_ENV=production
fi

# for backlogs
if [ -d plugins/redmine_backlogs ]; then
  if [ "$ALM_UPGRADE" = "y" ]; then
    bundle exec rake redmine:backlogs:install task_tracker=タスク story_trackers=機能 labels=false RAILS_ENV=production
  else
    bundle exec rake redmine:backlogs:install task_tracker=サポート story_trackers=機能 labels=false RAILS_ENV=production
  fi
fi

# ディレクトリを元に戻す
popd

